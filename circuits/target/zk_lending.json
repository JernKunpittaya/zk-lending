{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":15303100666362349043,"abi":{"parameters":[{"name":"new_will_liq_price","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"new_timestamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"new_nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"new_nonce","type":{"kind":"field"},"visibility":"private"},{"name":"prev_note","type":{"kind":"struct","path":"MyNote","fields":[{"name":"lend_amt","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"borrow_amt","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"will_liq_price","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"nullifier","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]},"visibility":"private"},{"name":"prev_hash","type":{"kind":"field"},"visibility":"private"},{"name":"prev_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"prev_hash_path","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"root","type":{"kind":"field"},"visibility":"private"},{"name":"liquidated_array","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"Liquidated","fields":[{"name":"liq_price","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}}]}},"visibility":"private"},{"name":"withdraw_lend_amt","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"lend_token_out","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"borrow_token_out","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"lend_token_in","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"borrow_token_in","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"61":{"source":"use dep::std;\n\n// ==== Global config ==== (percentage-based)\nglobal LTV_THRESHOLD: u64 = 50; //\nglobal LEND_INTEREST_RATE: u64 = 3; // annual rate\nglobal BORROW_INTEREST_RATE: u64 = 10; // annual rate\nglobal ACCEPTABLE_PERCENT:u64 = 1;\n\n// Assume price is integer\nstruct Liquidated{\n    liq_price: u64, // in smallest unit as integer\n    timestamp: u64\n}\n\nstruct MyNote{\n    lend_amt: u64,   // in smallest unit (scaled, e.g., x10^4)\n    borrow_amt: u64, // in smallest unit (scaled, e.g., x10^4)\n    will_liq_price: u64, // in smallest unit as integer\n    timestamp: u64,\n    nullifier: Field,\n    nonce: Field\n}\n\nfn simple_hash(left: Field, right: Field) -> Field{\n    std::hash::pedersen_hash([left, right])\n}\n\nfn hash_my_note(my_note: MyNote) -> Field{\n    std::hash::pedersen_hash([\n        my_note.lend_amt as Field, \n        my_note.borrow_amt as Field, \n        my_note.will_liq_price as Field, \n        my_note.timestamp as Field, \n        my_note.nullifier, \n        my_note.nonce\n    ])\n}\n\n// ====== CONSTRAINT ================\n// assert if LTV condition is satisfied\nfn assert_ltv(my_note: MyNote){\n    assert(my_note.borrow_amt * 100 <= LTV_THRESHOLD * my_note.lend_amt * my_note.will_liq_price);\n}\n\n\nfn abs_diff(x:u64, y:u64) -> u64 {\n    if x >=y { x-y } else { y-x }\n}\n\n// Check if two values are within a percentage range\nfn is_within_percentage(x: u64, y: u64, percent: u64) -> u8 {\n    let diff = abs_diff(x, y) * 100;\n    let allowed_diff = percent * y;\n    if diff <= allowed_diff { 1 } else { 0 }\n}\n\n\n// Check if our will_liq_price is actually liquidated or not, accounting for lend & borrow interest\nfn is_myposition_liquidated( my_price: u64, liq_price: u64, my_time: u64, liq_time: u64) -> u8 {\n    if liq_time < my_time{\n        0\n    } else{\n        let one_year_seconds = 365 * 24 * 60 * 60;\n        let time_diff = liq_time - my_time;\n\n        let borrow_factor = one_year_seconds + BORROW_INTEREST_RATE * time_diff;\n        let lend_factor = one_year_seconds + LEND_INTEREST_RATE * time_diff;\n\n        let my_adjusted_price = borrow_factor * my_price;\n        let liq_adjusted_price = lend_factor * liq_price;\n\n        is_within_percentage(my_adjusted_price, liq_adjusted_price, ACCEPTABLE_PERCENT)\n    }\n}\n\nfn assert_update_amt(prev_amt: u64, prev_timestamp: u64, curr_amt: u64, curr_timestamp: u64, interest_rate: u64){\n    let one_year_seconds = 365 * 24 * 60 * 60;\n    let time_diff = curr_timestamp - prev_timestamp;\n\n    let projected_amt = (one_year_seconds + interest_rate * time_diff) * prev_amt;\n    let actual_amt = one_year_seconds * curr_amt;\n\n    assert(is_within_percentage(projected_amt, actual_amt, ACCEPTABLE_PERCENT) == 1);\n}\n\n// check if my position is liquidated \nfn is_my_pos_liquidated(my_note: MyNote, liquidated_array: [Liquidated; 3]) -> u8 {\n    let mut is_liquidated: u8 = 0;\n\n    for i in 0..3 {\n        let check = is_myposition_liquidated(\n            my_note.will_liq_price,\n            liquidated_array[i].liq_price,\n            my_note.timestamp,\n            liquidated_array[i].timestamp,\n        );\n        is_liquidated += check;\n    }\n    if is_liquidated >0 { 1 } else { 0 }\n}\n\n// assert that my position not liquidated\nfn assert_non_liquidated(my_note: MyNote, liquidated_array: [Liquidated; 3]){\n    assert(is_my_pos_liquidated(my_note, liquidated_array)==0);\n}\n\n// assert that my position gets liquidated\nfn assert_liquidated(my_note: MyNote, liquidated_array: [Liquidated; 3]){\n    assert(is_my_pos_liquidated(my_note, liquidated_array)==1);\n}\n\nfn process_path_hash(leaf: Field, index: u32, another_leaf: Field) -> Field {\n    // if index is even, then leaf is left child\n    // if index is odd, then leaf is right child\n    if index % 2 == 0 {\n        simple_hash(leaf, another_leaf)\n    } else {\n        simple_hash(another_leaf, leaf)\n    }\n}\n\nfn assert_inclusion_proof(leaf: Field, index: u32, hash_path:[Field;3], root:Field){\n    let mut calculated_hash = leaf;\n    let mut calculated_index = index;\n    for i in 0..3 {\n        calculated_hash = process_path_hash(calculated_hash, calculated_index, hash_path[i]);\n        calculated_index = calculated_index / 2;\n    }\n\n    assert(calculated_hash == root);\n}\n\n\n// ============ zk-lending OPERATION CONSTRAINT =============\n\n// if no borrow when initiating note, set borrow_amt = 0, and will_liq_price = 0\nfn init_note(lend_amt: u64, borrow_amt: u64, will_liq_price: u64, timestamp: u64, nullifier: Field, nonce: Field) -> MyNote{\n    let my_note: MyNote = MyNote{\n        lend_amt,\n        borrow_amt,\n        will_liq_price, \n        timestamp,\n        nullifier,\n        nonce\n    };\n    assert_ltv(my_note);\n    my_note\n}\n\nfn borrow(prev_note: MyNote, prev_hash: Field, prev_index: u32, prev_hash_path: [Field; 3], root: Field, liquidated_array: [Liquidated; 3], new_note:MyNote, additional_borrow_amt:u64) -> Field{\n    assert(hash_my_note(prev_note) == prev_hash);\n    assert_inclusion_proof(prev_hash, prev_index, prev_hash_path, root);\n    assert_non_liquidated(prev_note, liquidated_array);\n    \n    // assert updated lending amount\n    assert_update_amt(prev_note.lend_amt, prev_note.timestamp, new_note.lend_amt, new_note.timestamp, LEND_INTEREST_RATE);\n\n    // assert updated borrowing amount (before borrowing more)\n    assert_update_amt(prev_note.borrow_amt, prev_note.timestamp, new_note.borrow_amt - additional_borrow_amt, new_note.timestamp, BORROW_INTEREST_RATE);\n\n    assert_ltv(new_note);\n    hash_my_note(new_note)\n}\n\nfn repay(prev_note: MyNote, prev_hash: Field, prev_index: u32, prev_hash_path: [Field; 3], root: Field, liquidated_array: [Liquidated; 3], new_note:MyNote, repay_borrow_amt:u64) -> Field{\n    assert(hash_my_note(prev_note) == prev_hash);\n    assert_inclusion_proof(prev_hash, prev_index, prev_hash_path, root);\n    assert_non_liquidated(prev_note, liquidated_array);\n    \n    // assert updated lending amount\n    assert_update_amt(prev_note.lend_amt, prev_note.timestamp, new_note.lend_amt, new_note.timestamp, LEND_INTEREST_RATE);\n\n    assert(repay_borrow_amt <= update_amt(prev_note.borrow_amt, prev_note.timestamp, new_note.timestamp, BORROW_INTEREST_RATE));\n    \n    // assert updated borrowing amount (before borrowing more)\n    assert_update_amt(prev_note.borrow_amt, prev_note.timestamp, new_note.borrow_amt + repay_borrow_amt, new_note.timestamp, BORROW_INTEREST_RATE);\n\n    assert_ltv(new_note);\n    hash_my_note(new_note)\n}\n\n\nfn lend(prev_note: MyNote, prev_hash: Field, prev_index: u32, prev_hash_path: [Field; 3], root: Field, liquidated_array: [Liquidated; 3], new_note:MyNote, additional_deposit_amt:u64) -> Field{\n    assert(hash_my_note(prev_note) == prev_hash);\n    assert_inclusion_proof(prev_hash, prev_index, prev_hash_path, root);\n    assert_non_liquidated(prev_note, liquidated_array);\n    \n    // assert updated lending amount (before lending/depositing more)\n    assert_update_amt(prev_note.lend_amt, prev_note.timestamp, new_note.lend_amt - additional_deposit_amt, new_note.timestamp, LEND_INTEREST_RATE);\n\n    // assert updated borrowing amount \n    assert_update_amt(prev_note.borrow_amt, prev_note.timestamp, new_note.borrow_amt, new_note.timestamp, BORROW_INTEREST_RATE);\n\n    assert_ltv(new_note);\n    hash_my_note(new_note)\n}\n\n\nfn withdraw(prev_note: MyNote, prev_hash: Field, prev_index: u32, prev_hash_path: [Field; 3], root: Field, liquidated_array: [Liquidated; 3], new_note:MyNote, withdraw_lend_amt:u64) -> Field{\n    assert(hash_my_note(prev_note) == prev_hash);\n    assert_inclusion_proof(prev_hash, prev_index, prev_hash_path, root);\n    assert_non_liquidated(prev_note, liquidated_array);\n    \n    assert(withdraw_lend_amt <= update_amt(prev_note.lend_amt, prev_note.timestamp, new_note.timestamp, LEND_INTEREST_RATE));\n    \n    // assert updated lending amount (before lending/depositing more)\n    assert_update_amt(prev_note.lend_amt, prev_note.timestamp, new_note.lend_amt + withdraw_lend_amt, new_note.timestamp, LEND_INTEREST_RATE);\n\n    // assert updated borrowing amount \n    assert_update_amt(prev_note.borrow_amt, prev_note.timestamp, new_note.borrow_amt, new_note.timestamp, BORROW_INTEREST_RATE);\n\n    assert_ltv(new_note);\n    hash_my_note(new_note)\n}\n\n// =============== HELPER FUNCTIONS ========================\n\nfn construct_merkle_tree(leaf_array:[Field;8]) -> [Field;7]{\n    let mut lv1_nodes: [Field;4] = [0;4];\n    for i in 0..4 {\n        lv1_nodes[i] = simple_hash(leaf_array[2*i], leaf_array[2*i+1]);\n    }\n    let mut lv2_nodes: [Field;2] = [0;2];\n    for i in 0..2 {\n        lv2_nodes[i] = simple_hash(lv1_nodes[2*i], lv1_nodes[2*i+1]);\n    }\n    let root = simple_hash(lv2_nodes[0], lv2_nodes[1]);\n    [lv1_nodes[0], lv1_nodes[1], lv1_nodes[2], lv1_nodes[3], lv2_nodes[0], lv2_nodes[1], root]\n\n}\n\nfn update_amt(prev_amt: u64, prev_timestamp: u64, curr_timestamp: u64, interest_rate: u64)-> u64{\n    let one_year_seconds = 365 * 24 * 60 * 60;\n    let time_diff = curr_timestamp - prev_timestamp;\n\n    (one_year_seconds + interest_rate * time_diff) * prev_amt/one_year_seconds\n    \n}\n\nfn update_lend_amt_new_liq_price(will_liq_price: u64, borrow_amt: u64) -> u64 {\n    borrow_amt*100/(will_liq_price*LTV_THRESHOLD)+1\n}\n\nfn update_borrow_amt_new_liq_price(will_liq_price: u64, lend_amt: u64) -> u64 {\n    will_liq_price*LTV_THRESHOLD*lend_amt/100\n}\n\nfn global_will_liq_price(initial_will_liq_price: u64, timestamp: u64) -> u64 {\n    let one_year_seconds = 365 * 24 * 60 * 60;\n    let time_diff = timestamp - 0;\n\n    let borrow_factor = one_year_seconds + BORROW_INTEREST_RATE * time_diff;\n    let lend_factor = one_year_seconds + LEND_INTEREST_RATE * time_diff;\n\n    borrow_factor * initial_will_liq_price/ lend_factor\n}\n\nfn main(\n    new_will_liq_price: u64, new_timestamp: u64, new_nullifier: Field, new_nonce: Field,\n    prev_note: MyNote, prev_hash: Field, prev_index: u32, prev_hash_path: [Field; 3], root: Field, \n    liquidated_array: [Liquidated; 3], withdraw_lend_amt:u64, lend_token_out: u64, borrow_token_out: u64,lend_token_in: u64, borrow_token_in: u64,\n) -> pub Field { // return the new note hash\n\n    // assert that token in and out are mutually exclusive\n    assert(lend_token_in * lend_token_out == 0);\n    assert(borrow_token_in * borrow_token_out == 0); \n\n    // old is empty init note with no check -> return\n    if (prev_note.lend_amt == 0) & (prev_note.borrow_amt == 0) & (prev_note.will_liq_price == 0){\n        let my_note = init_note(lend_token_in, borrow_token_out, new_will_liq_price, new_timestamp, new_nullifier, new_nonce);\n        assert_ltv(my_note);\n        hash_my_note(my_note);\n    } else { // validate the old note\n        assert(hash_my_note(prev_note) == prev_hash);\n        assert_inclusion_proof(prev_hash, prev_index, prev_hash_path, root);\n    }\n\n    // if the old note is liquidated, settle the note\n    if is_my_pos_liquidated(prev_note, liquidated_array) == 1 {\n        // calculate asset left after liquidation. interest is forfeited in this case. \n        // give asset back to the user and reset the note\n        assert_liquidated(prev_note, liquidated_array);\n        let lend_asset_left_eqv = prev_note.lend_amt * prev_note.will_liq_price;\n        let borrow_amt = update_amt(prev_note.borrow_amt, prev_note.timestamp, new_timestamp, BORROW_INTEREST_RATE);\n        let borrow_asset_left_eqv = lend_asset_left_eqv - borrow_amt;\n        assert(borrow_token_out <= borrow_asset_left_eqv);\n        assert(borrow_token_in == 0);\n        assert(lend_token_out == 0);\n        assert(lend_token_in == 0);\n        let my_note = MyNote {\n            lend_amt: 0,\n            borrow_amt: 0,\n            will_liq_price: 0,\n            timestamp:new_timestamp,\n            nullifier:new_nullifier,\n            nonce:new_nonce\n        };\n        hash_my_note(my_note);\n    } else {\n        // assert that the old note is not liquidated\n        assert_non_liquidated(prev_note, liquidated_array);\n\n        let new_lend_amt = update_amt(prev_note.lend_amt, prev_note.timestamp, new_timestamp, LEND_INTEREST_RATE) + lend_token_in - lend_token_out;\n        let new_borrow_amt = update_amt(prev_note.borrow_amt, prev_note.timestamp, new_timestamp, BORROW_INTEREST_RATE) + borrow_token_in - borrow_token_out; \n        let my_note = MyNote {\n            lend_amt: new_lend_amt,\n            borrow_amt: new_borrow_amt,\n            will_liq_price: new_will_liq_price,\n            timestamp: new_timestamp,\n            nullifier:new_nullifier,\n            nonce:new_nonce,\n        };\n        assert_ltv(my_note);\n        // assert that the new note is not liquidated\n        assert_non_liquidated(my_note, liquidated_array);\n        hash_my_note(my_note);\n    }\n    hash_my_note(MyNote{\n        lend_amt: 0,\n        borrow_amt: 0,\n        will_liq_price: 0,\n        timestamp: new_timestamp,\n        nullifier: new_nullifier,\n        nonce: new_nonce\n    })\n    // return 0 as placeholder\n}\n\n\n#[test]\nfn test_main() {\n    // Time = 0, current ETH price = 3000,\n    // there exists buckets at liquidation price 2800, 2600, 2400, 2200\n\n    let zero_leaf = 0 as Field;\n    let mut merkle_leaves: [Field;8] = ([1234 as Field, 542 as Field, zero_leaf, zero_leaf , zero_leaf, zero_leaf, zero_leaf, zero_leaf ]);\n    let mut liquidated_array: [Liquidated;3] = [Liquidated{ liq_price: 0, timestamp: 0}, Liquidated{ liq_price: 0, timestamp: 0}, Liquidated{ liq_price: 0, timestamp: 0}];\n    // a, b deposit and borrow right away\n    let a_init_lend_amt = 50000; // already scale by (10^4)\n    let a_init_will_liq_price = 2800;\n    let a_init_borrow_amt = update_borrow_amt_new_liq_price(a_init_will_liq_price, a_init_lend_amt); \n    let a_init_note = init_note(a_init_lend_amt, a_init_borrow_amt, a_init_will_liq_price, 0, 112 as Field, 13 as Field);\n    \n    let b_init_lend_amt = 20000; // already scale by (10^4)\n    let b_init_will_liq_price = 2600;\n    let b_init_borrow_amt = update_borrow_amt_new_liq_price(b_init_will_liq_price, b_init_lend_amt); \n    let b_init_note = init_note(b_init_lend_amt, b_init_borrow_amt, b_init_will_liq_price, 0, 132 as Field, 156 as Field);\n    \n\n    let a_init_note_hash = hash_my_note(a_init_note);\n    let a_init_note_index = 2;\n    merkle_leaves[a_init_note_index] = a_init_note_hash;\n    let b_init_note_hash = hash_my_note(b_init_note);\n    let b_init_note_index = 3;\n    merkle_leaves[b_init_note_index] = b_init_note_hash;\n\n    // T = 4 hrs, liquidate 2800 ish, then bounce back 2900 \n    let timestamp_4_hrs = 4* 60* 60;\n    liquidated_array[0] = Liquidated{liq_price: global_will_liq_price(2800, timestamp_4_hrs), timestamp: timestamp_4_hrs};\n    \n    // T = 12 hrs, liquidate 2800 ish again (since someone initiate position in this bucket)\n    let timestamp_12_hrs = 12* 60* 60;\n    liquidated_array[1] = Liquidated{liq_price: global_will_liq_price(2800, timestamp_12_hrs), timestamp:timestamp_12_hrs};\n\n    // a's position is gone\n    assert_liquidated(a_init_note, liquidated_array);\n\n    // T = 32 hrs\n    // b lend more, making will_liq_price drop to around 2200\n    let timestamp_32_hrs = 32*60*60;\n    let merkle_tree = construct_merkle_tree(merkle_leaves);\n    let b_init_note_hash_path = [merkle_leaves[2], merkle_tree[0], merkle_tree[5]];\n    let merkle_root = merkle_tree[6];\n\n    let b_2200_will_liq_price =  global_will_liq_price(2200, timestamp_32_hrs);\n    let b_2200_borrow_amt = update_amt(b_init_note.borrow_amt, b_init_note.timestamp, timestamp_32_hrs, BORROW_INTEREST_RATE);\n    \n    let b_2200_lend_amt = update_lend_amt_new_liq_price(b_2200_will_liq_price, b_2200_borrow_amt);\n    let b_updated_lend_amt = update_amt(b_init_note.lend_amt, b_init_note.timestamp, timestamp_32_hrs, LEND_INTEREST_RATE );\n    let b_additional_lend_amt = b_2200_lend_amt - b_updated_lend_amt;\n    \n\n    let b_2200_note = MyNote {\n        lend_amt: b_2200_lend_amt,\n        borrow_amt: b_2200_borrow_amt,\n        will_liq_price: b_2200_will_liq_price,\n        timestamp: timestamp_32_hrs,\n        nullifier: 999 as Field,\n        nonce: 888 as Field,\n    };\n\n    lend(\n        b_init_note,\n        b_init_note_hash,\n        b_init_note_index,\n        b_init_note_hash_path,\n        merkle_root,\n        liquidated_array,\n        b_2200_note,\n        b_additional_lend_amt,\n    ); \n\n    let b_2200_note_hash = hash_my_note(b_2200_note);\n    let b_2200_note_index = 4;\n    merkle_leaves[b_2200_note_index] = b_2200_note_hash;\n\n\n    // T = 32 hrs\n    // b borrow more, making will_liq_price rise to around 2400\n    let merkle_tree = construct_merkle_tree(merkle_leaves);\n    let b_2200_note_hash_path = [zero_leaf, merkle_tree[3], merkle_tree[4]];\n    let merkle_root = merkle_tree[6];\n\n    let b_2400_will_liq_price =  global_will_liq_price(2400, timestamp_32_hrs);\n    let b_2400_lend_amt = update_amt(b_2200_note.lend_amt, b_2200_note.timestamp, timestamp_32_hrs, LEND_INTEREST_RATE);\n    \n    let b_2400_borrow_amt = update_borrow_amt_new_liq_price(b_2400_will_liq_price, b_2400_lend_amt);\n    let b_updated_borrow_amt = update_amt(b_2200_note.borrow_amt, b_2200_note.timestamp, timestamp_32_hrs, BORROW_INTEREST_RATE );\n    let b_additional_borrow_amt = b_2400_borrow_amt - b_updated_borrow_amt;\n    \n\n    let b_2400_note = MyNote {\n        lend_amt: b_2400_lend_amt,\n        borrow_amt: b_2400_borrow_amt,\n        will_liq_price: b_2400_will_liq_price,\n        timestamp: timestamp_32_hrs,\n        nullifier: 1890 as Field,\n        nonce: 97 as Field,\n    };\n\n    borrow(\n        b_2200_note,\n        b_2200_note_hash,\n        b_2200_note_index,\n        b_2200_note_hash_path,\n        merkle_root,\n        liquidated_array,\n        b_2400_note,\n        b_additional_borrow_amt,\n    ); \n\n    let b_2400_note_hash = hash_my_note(b_2400_note);\n    let b_2400_note_index = 5;\n    merkle_leaves[b_2400_note_index] = b_2400_note_hash;\n\n    // T = 72 hrs, liquidate 2600 ish..\n    let timestamp_72_hrs = 72* 60* 60;\n    liquidated_array[2] = Liquidated{liq_price: global_will_liq_price(2600, timestamp_72_hrs), timestamp: timestamp_72_hrs};\n    \n    // T = 96 hrs, b repays all his debt\n    let timestamp_96_hrs = 96* 60* 60;\n    let merkle_tree = construct_merkle_tree(merkle_leaves);\n    let b_2400_note_hash_path = [merkle_leaves[4], merkle_tree[3], merkle_tree[4]];\n    let merkle_root = merkle_tree[6];\n\n    // repay all debt\n    let b_0_will_liq_price =  0;\n    let b_0_lend_amt = update_amt(b_2400_note.lend_amt, b_2400_note.timestamp, timestamp_96_hrs, LEND_INTEREST_RATE);\n    \n    let b_0_borrow_amt = 0;\n    let b_updated_borrow_amt = update_amt(b_2400_note.borrow_amt, b_2400_note.timestamp, timestamp_96_hrs, BORROW_INTEREST_RATE );\n    let b_repay_borrow_amt = b_updated_borrow_amt - b_0_borrow_amt;\n    \n\n    let b_0_note = MyNote {\n        lend_amt: b_0_lend_amt,\n        borrow_amt: b_0_borrow_amt,\n        will_liq_price: b_0_will_liq_price,\n        timestamp: timestamp_96_hrs,\n        nullifier: 2 as Field,\n        nonce: 932494 as Field,\n    };\n\n    repay(\n        b_2400_note,\n        b_2400_note_hash,\n        b_2400_note_index,\n        b_2400_note_hash_path,\n        merkle_root,\n        liquidated_array,\n        b_0_note,\n        b_repay_borrow_amt,\n    ); \n\n    let b_0_note_hash = hash_my_note(b_0_note);\n    let b_0_note_index = 6;\n    merkle_leaves[b_0_note_index] = b_0_note_hash;\n\n    // T = 120 hrs, b withdraw some money\n    let timestamp_120_hrs = 120* 60* 60;\n    let merkle_tree = construct_merkle_tree(merkle_leaves);\n    let b_0_note_hash_path = [zero_leaf, merkle_tree[2], merkle_tree[4]];\n    let merkle_root = merkle_tree[6];\n\n    let b_updated_lend_amt = update_amt(b_0_note.lend_amt, b_0_note.timestamp, timestamp_120_hrs, LEND_INTEREST_RATE);\n    let b_final_lend_amt = 20000;\n    let b_final_borrow_amt = 0;\n    let b_withdraw_lend_amt = b_updated_lend_amt - b_final_lend_amt;\n    \n\n    let b_final_note = MyNote {\n        lend_amt: b_final_lend_amt,\n        borrow_amt: b_final_borrow_amt,\n        will_liq_price: 0,\n        timestamp: timestamp_120_hrs,\n        nullifier: 223 as Field,\n        nonce: 12309 as Field,\n    };\n\n    withdraw(\n        b_0_note,\n        b_0_note_hash,\n        b_0_note_index,\n        b_0_note_hash_path,\n        merkle_root,\n        liquidated_array,\n        b_final_note,\n        b_withdraw_lend_amt,\n    ); \n}\n\n\n#[test]\nfn test_inclusion_proof() {\n    let a = 1 as Field;\n    let b = 2 as Field;\n    let c = 3 as Field;\n    let d = 4 as Field;\n    let zero = 0 as Field;\n\n    let merkle_leaves = [a, b, c, d, zero, zero, zero, zero];\n    let merkle = construct_merkle_tree(merkle_leaves);\n    \n    let leaf = c;\n    let index = 2;\n    let hash_path = [d, merkle[0], merkle[5]];\n    let root = merkle[6];\n\n    assert_inclusion_proof(leaf, index, hash_path, root);\n}\n\n#[test]\nfn test_ltv() {\n    let my_note = MyNote {\n        lend_amt: 5,\n        borrow_amt: 10,\n        will_liq_price: 4,\n        timestamp: 1000,\n        nullifier: 111 as Field,\n        nonce: 222 as Field,\n    };\n    assert_ltv(my_note);\n}\n\n\n#[test]\nfn test_liquidation_check() {\n\n    let my_note = MyNote {\n        lend_amt: 1,\n        borrow_amt: 500,\n        will_liq_price: 1000,\n        timestamp: 1000,\n        nullifier: 111 as Field,\n        nonce: 222 as Field,\n    };\n\n    let liquidated_array = [\n        Liquidated { liq_price: 1100, timestamp: 1005 },   \n        Liquidated { liq_price: 1200, timestamp: 1010 },  \n        Liquidated { liq_price: 1100, timestamp: 1200 },  \n    ];\n    assert_ltv(my_note);\n    assert_non_liquidated(my_note, liquidated_array);\n}\n\n\n","path":"/Users/yoyoismacbook/Desktop/zk/zk-lending/circuits/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_invert","directive_integer_quotient"]}